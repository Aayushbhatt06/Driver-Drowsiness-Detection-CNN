# -*- coding: utf-8 -*-
"""IP_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sWz_p9Cf5cs4OrbYduO9_I3uFiUJhVGh
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("akashshingha850/mrl-eye-dataset")

print("Path to dataset files:", path)

import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

import os

print("Main dataset path:", path)
for root, dirs, files in os.walk(path):
    print(root)
    if len(files) > 0:
        print("Files sample:", files[:5])
    break  # just to avoid huge output

!ls "/root/.cache/kagglehub/datasets/akashshingha850/mrl-eye-dataset/versions/4"

!find "/root/.cache/kagglehub/datasets/akashshingha850/mrl-eye-dataset/versions/4" -type d | head -20

base_dir = "/root/.cache/kagglehub/datasets/akashshingha850/mrl-eye-dataset/versions/4/data"

train_dir = os.path.join(base_dir, "train")
val_dir = os.path.join(base_dir, "val")
test_dir = os.path.join(base_dir, "test")

IMG_SIZE = (64, 64)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    zoom_range=0.1
)

val_test_datagen = ImageDataGenerator(rescale=1./255)

train_gen = train_datagen.flow_from_directory(
    train_dir,
    target_size=IMG_SIZE,
    color_mode='grayscale',
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

val_gen = val_test_datagen.flow_from_directory(
    val_dir,
    target_size=IMG_SIZE,
    color_mode='grayscale',
    batch_size=BATCH_SIZE,
    class_mode='categorical'
)

test_gen = val_test_datagen.flow_from_directory(
    test_dir,
    target_size=IMG_SIZE,
    color_mode='grayscale',
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

# See how classes were labeled during training
print(train_gen.class_indices)

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(64,64,1)),
    MaxPooling2D(2,2),

    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),

    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(
    train_gen,
    validation_data=val_gen,
    epochs=10
)

loss, acc = model.evaluate(test_gen)
print(f"Test Accuracy: {acc*100:.2f}%")

model.save("driver_drowsiness_cnn.h5")
print("Model saved as driver_drowsiness_cnn.h5")

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Validation')
plt.title("Model Accuracy")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()
plt.show()

from tensorflow.keras.models import load_model

model = load_model("driver_drowsiness_cnn.h5")
print("Model loaded successfully.")

from tensorflow.keras.preprocessing import image
import numpy as np

# Load image in grayscale and resize to 64x64 (as used during training)
img = image.load_img("open.png", target_size=(64, 64), color_mode='grayscale')

# Convert to array and scale
img_array = image.img_to_array(img)
img_array = np.expand_dims(img_array, axis=0)
img_array = img_array / 255.0

# Make prediction
prediction = model.predict(img_array)
print("Prediction:", prediction)

# If softmax output (2 classes), interpret result
if prediction[0][0] < prediction[0][1]:
    print("Predicted: Closed Eyes (Drowsy)")
else:
    print("Predicted: Open Eyes (Alert)")

from tensorflow.keras.preprocessing import image
import numpy as np
import matplotlib.pyplot as plt

def predict_eye_state(img_name):
    # Load and preprocess image
    img = image.load_img(img_name, target_size=(64, 64), color_mode='grayscale')
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0

    # Predict
    prediction = model.predict(img_array)
    print("Prediction probabilities:", prediction)

    # Interpret
    if prediction[0][0] < prediction[0][1]:
        label = "Closed Eyes (Drowsy)"
    else:
        label = "Open Eyes (Alert)"

    # Show image with prediction
    plt.imshow(img, cmap='gray')
    plt.title(f"Predicted: {label}")
    plt.axis('off')
    plt.show()

    return label

predict_eye_state("open.png")

predict_eye_state("close.png")

